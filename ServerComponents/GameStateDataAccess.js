/**
 * Layer that offers access to GameState objects.
 */

var GameState = require('./GameState');

/**
 * Creates a repository that is used to retrieve GameStae data.
 * 
 * @param {Object} connection The MongoDB connection.
 * @returns {GameStateRepository}
 */
GameStateRepository = function(connection) 
{
	if (connection === undefined) {
		throw new Error("Connection parameter omitted!");
	}
	if(connection === null) {
		throw new Error("Invalid connection or connection could not be established!");
	}
	/**
	 * The MongoDB database connection.
	 * 
	 * @var {Object}
	 */
	this.connection = connection;
	
	/**
	 * Function callbacks that are invoked whenever an internal error occurs.
	 * 
	 * @var {Array} An array of error handler callbacks.
	 */
	this.errorHandlers = [];
};

/**
 * Searches for a specific GameState.
 * 
 * Requires the GameState ID (which was generated by the client) and
 * the user whose GameState is requested.
 * 
 * The given callback will be invoked with either the GameState object
 * that was found or null if the requested state does not exist.
 * 
 * @param {String} identifier
 * @param {User} user
 * @param {function} callback
 */
GameStateRepository.prototype.byGameSessionId = function(identifier, user, callback)
{
	var query = {
		'userId': user.getId(), 
		'state': {
			'id': identifier
		}
	};
	this.connection.gameStates.find(query, this._createResultHandler(callback));
};

/**
 * Saves the given GameState.
 * 
 * If the state does not exist it is inserted. If there is
 * already a GameState with the same game session id for that
 * user, then it will be overwritten by the new one.
 * 
 * @param {GameState} state
 * @param {User} user
 */
GameStateRepository.prototype.save = function(state, user) {
	var self = this;
	this.byGameSessionId(state.getGameSessionId(), user, function(existingState) {
		if (existingState !== null) {
			state.setId(existingState.getId());
		}
		var json = self._gameStateToJson(state, user);
		self.connection.gameStates.save(json);
	});
};

/**
 * Creates a callback that handles a MongoDB result.
 * 
 * Notifies error handlers if an error occurs. In case of
 * a successful result it will convert the result set 
 * into a GameState object (or null if not found) and 
 * pass it to the provided callback.
 * 
 * @param {function}
 * @return {function}
 */
GameStateRepository.prototype._createResultHandler = function(callback) {
	// Store the current context as the scope changes in the callback.
	var self = this;
	return function(error, result) {
		if (error) {
			self._notifyAboutError(error);
			return;
		}
		// Convert result to model.
		callback(self._jsonToGameState(result));
	};
};

/**
 * Accepts a result set from the database and converts it
 * into a GameState object.
 * 
 * If the result set is empty it will be converted to null.
 * 
 * @param {Object} result
 * @return {GameState}|null
 */
GameStateRepository.prototype._jsonToGameState = function(result) {
	if (result.length === 0) {
		// No game state was found.
		return null;
	}
	var state = GameState.fromJSON(result[0].gameState);
	state.setId(result[0]._id);
	return state;
};

/**
 * Converts a GameState into a JSON object that can be stored
 * in the database.
 * 
 * @param {GameState} state
 * @param {User} user
 * @returns {Object}
 */
GameStateRepository.prototype._gameStateToJson = function(state, user) {
	var stateAsJson = state.toJSON();
	var json = {
		'userId': user.getId(),
		'gameState': stateAsJson
	};
	if (state.getId() != null) {
		json._id = state.getId();
	}
	return json;
};

/**
 * Registers an additional error handler that is called whenever an
 * internal MongoDB error occurs.
 * 
 * Example:
 * <code>
 * repository.addErrorHandler(function(error) {
 *     // Handle error here.
 * });
 * </code>
 * 
 * @param {function} callback
 */
GameStateRepository.prototype.addErrorHandler = function(callback)
{
	this.errorHandlers.push(callback);
};

/**
 * Notifies all registered error callback about an error that occurred recently.
 * 
 * @param {String} error
 */
GameStateRepository.prototype._notifyAboutError = function(error) 
{
	for (var i = 0; i < this.errorHandlers.length; i++) {
		// Pass the error to each handler.
		this.errorHandlers[i](error);
	}
};

exports.class = GameStateRepository;